{
  "version": 3,
  "sources": ["../../@mysten/sui/src/transactions/ObjectCache.ts", "../../@mysten/sui/src/transactions/executor/caching.ts", "../../@mysten/sui/src/transactions/executor/queue.ts", "../../@mysten/sui/src/transactions/executor/serial.ts", "../../@mysten/sui/src/transactions/executor/parallel.ts", "../../@mysten/sui/src/transactions/intents/CoinWithBalance.ts", "../../@mysten/sui/src/transactions/Arguments.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { bcs } from '../bcs/index.js';\nimport { normalizeSuiAddress } from '../utils/sui-types.js';\nimport type { OpenMoveTypeSignature } from './data/internal.js';\nimport type { TransactionPlugin } from './resolve.js';\n\nexport interface ObjectCacheEntry {\n\tobjectId: string;\n\tversion: string;\n\tdigest: string;\n\towner: string | null;\n\tinitialSharedVersion: string | null;\n}\n\nexport interface MoveFunctionCacheEntry {\n\tpackage: string;\n\tmodule: string;\n\tfunction: string;\n\tparameters: OpenMoveTypeSignature[];\n}\n\nexport interface CacheEntryTypes {\n\tOwnedObject: ObjectCacheEntry;\n\tSharedOrImmutableObject: ObjectCacheEntry;\n\tMoveFunction: MoveFunctionCacheEntry;\n\tCustom: unknown;\n}\nexport abstract class AsyncCache {\n\tprotected abstract get<T extends keyof CacheEntryTypes>(\n\t\ttype: T,\n\t\tkey: string,\n\t): Promise<CacheEntryTypes[T] | null>;\n\tprotected abstract set<T extends keyof CacheEntryTypes>(\n\t\ttype: T,\n\t\tkey: string,\n\t\tvalue: CacheEntryTypes[T],\n\t): Promise<void>;\n\tprotected abstract delete<T extends keyof CacheEntryTypes>(type: T, key: string): Promise<void>;\n\tabstract clear<T extends keyof CacheEntryTypes>(type?: T): Promise<void>;\n\n\tasync getObject(id: string) {\n\t\tconst [owned, shared] = await Promise.all([\n\t\t\tthis.get('OwnedObject', id),\n\t\t\tthis.get('SharedOrImmutableObject', id),\n\t\t]);\n\n\t\treturn owned ?? shared ?? null;\n\t}\n\n\tasync getObjects(ids: string[]) {\n\t\treturn Promise.all([...ids.map((id) => this.getObject(id))]);\n\t}\n\n\tasync addObject(object: ObjectCacheEntry) {\n\t\tif (object.owner) {\n\t\t\tawait this.set('OwnedObject', object.objectId, object);\n\t\t} else {\n\t\t\tawait this.set('SharedOrImmutableObject', object.objectId, object);\n\t\t}\n\n\t\treturn object;\n\t}\n\n\tasync addObjects(objects: ObjectCacheEntry[]) {\n\t\tawait Promise.all(objects.map(async (object) => this.addObject(object)));\n\t}\n\n\tasync deleteObject(id: string) {\n\t\tawait Promise.all([this.delete('OwnedObject', id), this.delete('SharedOrImmutableObject', id)]);\n\t}\n\n\tasync deleteObjects(ids: string[]) {\n\t\tawait Promise.all(ids.map((id) => this.deleteObject(id)));\n\t}\n\n\tasync getMoveFunctionDefinition(ref: { package: string; module: string; function: string }) {\n\t\tconst functionName = `${normalizeSuiAddress(ref.package)}::${ref.module}::${ref.function}`;\n\t\treturn this.get('MoveFunction', functionName);\n\t}\n\n\tasync addMoveFunctionDefinition(functionEntry: MoveFunctionCacheEntry) {\n\t\tconst pkg = normalizeSuiAddress(functionEntry.package);\n\t\tconst functionName = `${pkg}::${functionEntry.module}::${functionEntry.function}`;\n\t\tconst entry = {\n\t\t\t...functionEntry,\n\t\t\tpackage: pkg,\n\t\t};\n\n\t\tawait this.set('MoveFunction', functionName, entry);\n\n\t\treturn entry;\n\t}\n\n\tasync deleteMoveFunctionDefinition(ref: { package: string; module: string; function: string }) {\n\t\tconst functionName = `${normalizeSuiAddress(ref.package)}::${ref.module}::${ref.function}`;\n\t\tawait this.delete('MoveFunction', functionName);\n\t}\n\n\tasync getCustom<T>(key: string) {\n\t\treturn this.get('Custom', key) as Promise<T | null>;\n\t}\n\n\tasync setCustom<T>(key: string, value: T) {\n\t\treturn this.set('Custom', key, value);\n\t}\n\n\tasync deleteCustom(key: string) {\n\t\treturn this.delete('Custom', key);\n\t}\n}\n\nexport class InMemoryCache extends AsyncCache {\n\t#caches = {\n\t\tOwnedObject: new Map<string, ObjectCacheEntry>(),\n\t\tSharedOrImmutableObject: new Map<string, ObjectCacheEntry>(),\n\t\tMoveFunction: new Map<string, MoveFunctionCacheEntry>(),\n\t\tCustom: new Map<string, unknown>(),\n\t};\n\n\tprotected async get<T extends keyof CacheEntryTypes>(type: T, key: string) {\n\t\treturn (this.#caches[type].get(key) as CacheEntryTypes[T]) ?? null;\n\t}\n\n\tprotected async set<T extends keyof CacheEntryTypes>(\n\t\ttype: T,\n\t\tkey: string,\n\t\tvalue: CacheEntryTypes[T],\n\t) {\n\t\t(this.#caches[type] as Map<string, typeof value>).set(key, value as never);\n\t}\n\n\tprotected async delete<T extends keyof CacheEntryTypes>(type: T, key: string) {\n\t\tthis.#caches[type].delete(key);\n\t}\n\n\tasync clear<T extends keyof CacheEntryTypes>(type?: T) {\n\t\tif (type) {\n\t\t\tthis.#caches[type].clear();\n\t\t} else {\n\t\t\tfor (const cache of Object.values(this.#caches)) {\n\t\t\t\tcache.clear();\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport interface ObjectCacheOptions {\n\tcache?: AsyncCache;\n\tonEffects?: (effects: typeof bcs.TransactionEffects.$inferType) => Promise<void>;\n}\n\nexport class ObjectCache {\n\t#cache: AsyncCache;\n\t#onEffects?: (effects: typeof bcs.TransactionEffects.$inferType) => Promise<void>;\n\n\tconstructor({ cache = new InMemoryCache(), onEffects }: ObjectCacheOptions) {\n\t\tthis.#cache = cache;\n\t\tthis.#onEffects = onEffects;\n\t}\n\n\tasPlugin(): TransactionPlugin {\n\t\treturn async (transactionData, _options, next) => {\n\t\t\tconst unresolvedObjects = transactionData.inputs\n\t\t\t\t.filter((input) => input.UnresolvedObject)\n\t\t\t\t.map((input) => input.UnresolvedObject!.objectId);\n\n\t\t\tconst cached = (await this.#cache.getObjects(unresolvedObjects)).filter(\n\t\t\t\t(obj) => obj !== null,\n\t\t\t);\n\n\t\t\tconst byId = new Map(cached.map((obj) => [obj!.objectId, obj]));\n\n\t\t\tfor (const input of transactionData.inputs) {\n\t\t\t\tif (!input.UnresolvedObject) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst cached = byId.get(input.UnresolvedObject.objectId);\n\n\t\t\t\tif (!cached) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (cached.initialSharedVersion && !input.UnresolvedObject.initialSharedVersion) {\n\t\t\t\t\tinput.UnresolvedObject.initialSharedVersion = cached.initialSharedVersion;\n\t\t\t\t} else {\n\t\t\t\t\tif (cached.version && !input.UnresolvedObject.version) {\n\t\t\t\t\t\tinput.UnresolvedObject.version = cached.version;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (cached.digest && !input.UnresolvedObject.digest) {\n\t\t\t\t\t\tinput.UnresolvedObject.digest = cached.digest;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tawait Promise.all(\n\t\t\t\ttransactionData.commands.map(async (commands) => {\n\t\t\t\t\tif (commands.MoveCall) {\n\t\t\t\t\t\tconst def = await this.getMoveFunctionDefinition({\n\t\t\t\t\t\t\tpackage: commands.MoveCall.package,\n\t\t\t\t\t\t\tmodule: commands.MoveCall.module,\n\t\t\t\t\t\t\tfunction: commands.MoveCall.function,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (def) {\n\t\t\t\t\t\t\tcommands.MoveCall._argumentTypes = def.parameters;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tawait next();\n\n\t\t\tawait Promise.all(\n\t\t\t\ttransactionData.commands.map(async (commands) => {\n\t\t\t\t\tif (commands.MoveCall?._argumentTypes) {\n\t\t\t\t\t\tawait this.#cache.addMoveFunctionDefinition({\n\t\t\t\t\t\t\tpackage: commands.MoveCall.package,\n\t\t\t\t\t\t\tmodule: commands.MoveCall.module,\n\t\t\t\t\t\t\tfunction: commands.MoveCall.function,\n\t\t\t\t\t\t\tparameters: commands.MoveCall._argumentTypes,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\t\t};\n\t}\n\n\tasync clear() {\n\t\tawait this.#cache.clear();\n\t}\n\n\tasync getMoveFunctionDefinition(ref: { package: string; module: string; function: string }) {\n\t\treturn this.#cache.getMoveFunctionDefinition(ref);\n\t}\n\n\tasync getObjects(ids: string[]) {\n\t\treturn this.#cache.getObjects(ids);\n\t}\n\n\tasync deleteObjects(ids: string[]) {\n\t\treturn this.#cache.deleteObjects(ids);\n\t}\n\n\tasync clearOwnedObjects() {\n\t\tawait this.#cache.clear('OwnedObject');\n\t}\n\n\tasync clearCustom() {\n\t\tawait this.#cache.clear('Custom');\n\t}\n\n\tasync getCustom<T>(key: string) {\n\t\treturn this.#cache.getCustom<T>(key);\n\t}\n\n\tasync setCustom<T>(key: string, value: T) {\n\t\treturn this.#cache.setCustom(key, value);\n\t}\n\n\tasync deleteCustom(key: string) {\n\t\treturn this.#cache.deleteCustom(key);\n\t}\n\n\tasync applyEffects(effects: typeof bcs.TransactionEffects.$inferType) {\n\t\tif (!effects.V2) {\n\t\t\tthrow new Error(`Unsupported transaction effects version ${effects.$kind}`);\n\t\t}\n\n\t\tconst { lamportVersion, changedObjects } = effects.V2;\n\n\t\tconst deletedIds: string[] = [];\n\t\tconst addedObjects: ObjectCacheEntry[] = [];\n\n\t\tchangedObjects.forEach(([id, change]) => {\n\t\t\tif (change.outputState.NotExist) {\n\t\t\t\tdeletedIds.push(id);\n\t\t\t} else if (change.outputState.ObjectWrite) {\n\t\t\t\tconst [digest, owner] = change.outputState.ObjectWrite;\n\n\t\t\t\taddedObjects.push({\n\t\t\t\t\tobjectId: id,\n\t\t\t\t\tdigest,\n\t\t\t\t\tversion: lamportVersion,\n\t\t\t\t\towner: owner.AddressOwner ?? owner.ObjectOwner ?? null,\n\t\t\t\t\tinitialSharedVersion: owner.Shared?.initialSharedVersion ?? null,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tawait Promise.all([\n\t\t\tthis.#cache.addObjects(addedObjects),\n\t\t\tthis.#cache.deleteObjects(deletedIds),\n\t\t\tthis.#onEffects?.(effects),\n\t\t]);\n\t}\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bcs } from '../../bcs/index.js';\nimport type { ExecuteTransactionBlockParams, SuiClient } from '../../client/index.js';\nimport type { Signer } from '../../cryptography/keypair.js';\nimport type { BuildTransactionOptions } from '../resolve.js';\nimport type { ObjectCacheOptions } from '../ObjectCache.js';\nimport { ObjectCache } from '../ObjectCache.js';\nimport type { Transaction } from '../Transaction.js';\nimport { isTransaction } from '../Transaction.js';\n\nexport class CachingTransactionExecutor {\n\t#client: SuiClient;\n\t#lastDigest: string | null = null;\n\tcache: ObjectCache;\n\n\tconstructor({\n\t\tclient,\n\t\t...options\n\t}: ObjectCacheOptions & {\n\t\tclient: SuiClient;\n\t}) {\n\t\tthis.#client = client;\n\t\tthis.cache = new ObjectCache(options);\n\t}\n\n\t/**\n\t * Clears all Owned objects\n\t * Immutable objects, Shared objects, and Move function definitions will be preserved\n\t */\n\tasync reset() {\n\t\tawait Promise.all([\n\t\t\tthis.cache.clearOwnedObjects(),\n\t\t\tthis.cache.clearCustom(),\n\t\t\tthis.waitForLastTransaction(),\n\t\t]);\n\t}\n\n\tasync buildTransaction({\n\t\ttransaction,\n\t\t...options\n\t}: { transaction: Transaction } & BuildTransactionOptions) {\n\t\ttransaction.addBuildPlugin(this.cache.asPlugin());\n\t\treturn transaction.build({\n\t\t\tclient: this.#client,\n\t\t\t...options,\n\t\t});\n\t}\n\n\tasync executeTransaction({\n\t\ttransaction,\n\t\toptions,\n\t\t...input\n\t}: {\n\t\ttransaction: Transaction | Uint8Array;\n\t} & Omit<ExecuteTransactionBlockParams, 'transactionBlock'>) {\n\t\tconst bytes = isTransaction(transaction)\n\t\t\t? await this.buildTransaction({ transaction })\n\t\t\t: transaction;\n\n\t\tconst results = await this.#client.executeTransactionBlock({\n\t\t\t...input,\n\t\t\ttransactionBlock: bytes,\n\t\t\toptions: {\n\t\t\t\t...options,\n\t\t\t\tshowRawEffects: true,\n\t\t\t},\n\t\t});\n\n\t\tif (results.rawEffects) {\n\t\t\tconst effects = bcs.TransactionEffects.parse(Uint8Array.from(results.rawEffects));\n\t\t\tawait this.applyEffects(effects);\n\t\t}\n\n\t\treturn results;\n\t}\n\n\tasync signAndExecuteTransaction({\n\t\toptions,\n\t\ttransaction,\n\t\t...input\n\t}: {\n\t\ttransaction: Transaction;\n\n\t\tsigner: Signer;\n\t} & Omit<ExecuteTransactionBlockParams, 'transactionBlock' | 'signature'>) {\n\t\ttransaction.setSenderIfNotSet(input.signer.toSuiAddress());\n\t\tconst bytes = await this.buildTransaction({ transaction });\n\t\tconst { signature } = await input.signer.signTransaction(bytes);\n\t\tconst results = await this.executeTransaction({\n\t\t\ttransaction: bytes,\n\t\t\tsignature,\n\t\t\toptions,\n\t\t});\n\n\t\treturn results;\n\t}\n\n\tasync applyEffects(effects: typeof bcs.TransactionEffects.$inferType) {\n\t\tthis.#lastDigest = effects.V2?.transactionDigest ?? null;\n\t\tawait this.cache.applyEffects(effects);\n\t}\n\n\tasync waitForLastTransaction() {\n\t\tif (this.#lastDigest) {\n\t\t\tawait this.#client.waitForTransaction({ digest: this.#lastDigest });\n\t\t\tthis.#lastDigest = null;\n\t\t}\n\t}\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nexport class SerialQueue {\n\t#queue: Array<() => void> = [];\n\n\tasync runTask<T>(task: () => Promise<T>): Promise<T> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.#queue.push(() => {\n\t\t\t\ttask()\n\t\t\t\t\t.finally(() => {\n\t\t\t\t\t\tthis.#queue.shift();\n\t\t\t\t\t\tif (this.#queue.length > 0) {\n\t\t\t\t\t\t\tthis.#queue[0]();\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.then(resolve, reject);\n\t\t\t});\n\n\t\t\tif (this.#queue.length === 1) {\n\t\t\t\tthis.#queue[0]();\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport class ParallelQueue {\n\t#queue: Array<() => void> = [];\n\tactiveTasks = 0;\n\tmaxTasks: number;\n\n\tconstructor(maxTasks: number) {\n\t\tthis.maxTasks = maxTasks;\n\t}\n\n\trunTask<T>(task: () => Promise<T>): Promise<T> {\n\t\treturn new Promise<T>((resolve, reject) => {\n\t\t\tif (this.activeTasks < this.maxTasks) {\n\t\t\t\tthis.activeTasks++;\n\n\t\t\t\ttask()\n\t\t\t\t\t.finally(() => {\n\t\t\t\t\t\tif (this.#queue.length > 0) {\n\t\t\t\t\t\t\tthis.#queue.shift()!();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.activeTasks--;\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.then(resolve, reject);\n\t\t\t} else {\n\t\t\t\tthis.#queue.push(() => {\n\t\t\t\t\ttask()\n\t\t\t\t\t\t.finally(() => {\n\t\t\t\t\t\t\tif (this.#queue.length > 0) {\n\t\t\t\t\t\t\t\tthis.#queue.shift()!();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.activeTasks--;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then(resolve, reject);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { toBase64 } from '@mysten/bcs';\n\nimport type { bcs } from '../../bcs/index.js';\nimport type { SuiClient, SuiTransactionBlockResponseOptions } from '../../client/index.js';\nimport type { Signer } from '../../cryptography/keypair.js';\nimport type { ObjectCacheOptions } from '../ObjectCache.js';\nimport { isTransaction, Transaction } from '../Transaction.js';\nimport { CachingTransactionExecutor } from './caching.js';\nimport { SerialQueue } from './queue.js';\n\nexport class SerialTransactionExecutor {\n\t#queue = new SerialQueue();\n\t#signer: Signer;\n\t#cache: CachingTransactionExecutor;\n\t#defaultGasBudget: bigint;\n\n\tconstructor({\n\t\tsigner,\n\t\tdefaultGasBudget = 50_000_000n,\n\t\t...options\n\t}: Omit<ObjectCacheOptions, 'address'> & {\n\t\tclient: SuiClient;\n\t\tsigner: Signer;\n\t\t/** The gasBudget to use if the transaction has not defined it's own gasBudget, defaults to `50_000_000n` */\n\t\tdefaultGasBudget?: bigint;\n\t}) {\n\t\tthis.#signer = signer;\n\t\tthis.#defaultGasBudget = defaultGasBudget;\n\t\tthis.#cache = new CachingTransactionExecutor({\n\t\t\tclient: options.client,\n\t\t\tcache: options.cache,\n\t\t\tonEffects: (effects) => this.#cacheGasCoin(effects),\n\t\t});\n\t}\n\n\tasync applyEffects(effects: typeof bcs.TransactionEffects.$inferType) {\n\t\treturn this.#cache.applyEffects(effects);\n\t}\n\n\t#cacheGasCoin = async (effects: typeof bcs.TransactionEffects.$inferType) => {\n\t\tif (!effects.V2) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst gasCoin = getGasCoinFromEffects(effects).ref;\n\t\tif (gasCoin) {\n\t\t\tthis.#cache.cache.setCustom('gasCoin', gasCoin);\n\t\t} else {\n\t\t\tthis.#cache.cache.deleteCustom('gasCoin');\n\t\t}\n\t};\n\n\tasync buildTransaction(transaction: Transaction) {\n\t\treturn this.#queue.runTask(() => this.#buildTransaction(transaction));\n\t}\n\n\t#buildTransaction = async (transaction: Transaction) => {\n\t\tconst gasCoin = await this.#cache.cache.getCustom<{\n\t\t\tobjectId: string;\n\t\t\tversion: string;\n\t\t\tdigest: string;\n\t\t}>('gasCoin');\n\n\t\tconst copy = Transaction.from(transaction);\n\t\tif (gasCoin) {\n\t\t\tcopy.setGasPayment([gasCoin]);\n\t\t}\n\n\t\tcopy.setGasBudgetIfNotSet(this.#defaultGasBudget);\n\t\tcopy.setSenderIfNotSet(this.#signer.toSuiAddress());\n\n\t\treturn this.#cache.buildTransaction({ transaction: copy });\n\t};\n\n\tresetCache() {\n\t\treturn this.#cache.reset();\n\t}\n\n\twaitForLastTransaction() {\n\t\treturn this.#cache.waitForLastTransaction();\n\t}\n\n\texecuteTransaction(\n\t\ttransaction: Transaction | Uint8Array,\n\t\toptions?: SuiTransactionBlockResponseOptions,\n\t\tadditionalSignatures: string[] = [],\n\t) {\n\t\treturn this.#queue.runTask(async () => {\n\t\t\tconst bytes = isTransaction(transaction)\n\t\t\t\t? await this.#buildTransaction(transaction)\n\t\t\t\t: transaction;\n\n\t\t\tconst { signature } = await this.#signer.signTransaction(bytes);\n\t\t\tconst results = await this.#cache\n\t\t\t\t.executeTransaction({\n\t\t\t\t\tsignature: [signature, ...additionalSignatures],\n\t\t\t\t\ttransaction: bytes,\n\t\t\t\t\toptions,\n\t\t\t\t})\n\t\t\t\t.catch(async (error) => {\n\t\t\t\t\tawait this.resetCache();\n\t\t\t\t\tthrow error;\n\t\t\t\t});\n\n\t\t\tconst effectsBytes = Uint8Array.from(results.rawEffects!);\n\t\t\treturn {\n\t\t\t\tdigest: results.digest,\n\t\t\t\teffects: toBase64(effectsBytes),\n\t\t\t\tdata: results,\n\t\t\t};\n\t\t});\n\t}\n}\n\nexport function getGasCoinFromEffects(effects: typeof bcs.TransactionEffects.$inferType) {\n\tif (!effects.V2) {\n\t\tthrow new Error('Unexpected effects version');\n\t}\n\n\tconst gasObjectChange = effects.V2.changedObjects[effects.V2.gasObjectIndex!];\n\n\tif (!gasObjectChange) {\n\t\tthrow new Error('Gas object not found in effects');\n\t}\n\n\tconst [objectId, { outputState }] = gasObjectChange;\n\n\tif (!outputState.ObjectWrite) {\n\t\tthrow new Error('Unexpected gas object state');\n\t}\n\n\tconst [digest, owner] = outputState.ObjectWrite;\n\n\treturn {\n\t\tref: {\n\t\t\tobjectId,\n\t\t\tdigest,\n\t\t\tversion: effects.V2.lamportVersion,\n\t\t},\n\t\towner: owner.AddressOwner || owner.ObjectOwner!,\n\t};\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { toBase64 } from '@mysten/bcs';\nimport { promiseWithResolvers } from '@mysten/utils';\nimport { bcs } from '../../bcs/index.js';\nimport type { SuiObjectRef } from '../../bcs/types.js';\nimport type {\n\tSuiClient,\n\tSuiTransactionBlockResponse,\n\tSuiTransactionBlockResponseOptions,\n} from '../../client/index.js';\nimport type { Signer } from '../../cryptography/index.js';\nimport type { ObjectCacheOptions } from '../ObjectCache.js';\nimport { Transaction } from '../Transaction.js';\nimport { TransactionDataBuilder } from '../TransactionData.js';\nimport { CachingTransactionExecutor } from './caching.js';\nimport { ParallelQueue, SerialQueue } from './queue.js';\nimport { getGasCoinFromEffects } from './serial.js';\n\nconst PARALLEL_EXECUTOR_DEFAULTS = {\n\tcoinBatchSize: 20,\n\tinitialCoinBalance: 200_000_000n,\n\tminimumCoinBalance: 50_000_000n,\n\tmaxPoolSize: 50,\n\tepochBoundaryWindow: 1_000,\n} satisfies Omit<ParallelTransactionExecutorOptions, 'signer' | 'client'>;\nexport interface ParallelTransactionExecutorOptions extends Omit<ObjectCacheOptions, 'address'> {\n\tclient: SuiClient;\n\tsigner: Signer;\n\t/** The number of coins to create in a batch when refilling the gas pool */\n\tcoinBatchSize?: number;\n\t/** The initial balance of each coin created for the gas pool */\n\tinitialCoinBalance?: bigint;\n\t/** The minimum balance of a coin that can be reused for future transactions.  If the gasCoin is below this value, it will be used when refilling the gasPool */\n\tminimumCoinBalance?: bigint;\n\t/** The gasBudget to use if the transaction has not defined it's own gasBudget, defaults to `minimumCoinBalance` */\n\tdefaultGasBudget?: bigint;\n\t/**\n\t * Time to wait before/after the expected epoch boundary before re-fetching the gas pool (in milliseconds).\n\t * Building transactions will be paused for up to 2x this duration around each epoch boundary to ensure the\n\t * gas price is up-to-date for the next epoch.\n\t * */\n\tepochBoundaryWindow?: number;\n\t/** The maximum number of transactions that can be execute in parallel, this also determines the maximum number of gas coins that will be created */\n\tmaxPoolSize?: number;\n\t/** An initial list of coins used to fund the gas pool, uses all owned SUI coins by default */\n\tsourceCoins?: string[];\n}\n\ninterface CoinWithBalance {\n\tid: string;\n\tversion: string;\n\tdigest: string;\n\tbalance: bigint;\n}\nexport class ParallelTransactionExecutor {\n\t#signer: Signer;\n\t#client: SuiClient;\n\t#coinBatchSize: number;\n\t#initialCoinBalance: bigint;\n\t#minimumCoinBalance: bigint;\n\t#epochBoundaryWindow: number;\n\t#defaultGasBudget: bigint;\n\t#maxPoolSize: number;\n\t#sourceCoins: Map<string, SuiObjectRef | null> | null;\n\t#coinPool: CoinWithBalance[] = [];\n\t#cache: CachingTransactionExecutor;\n\t#objectIdQueues = new Map<string, (() => void)[]>();\n\t#buildQueue = new SerialQueue();\n\t#executeQueue: ParallelQueue;\n\t#lastDigest: string | null = null;\n\t#cacheLock: Promise<void> | null = null;\n\t#pendingTransactions = 0;\n\t#gasPrice: null | {\n\t\tprice: bigint;\n\t\texpiration: number;\n\t} = null;\n\n\tconstructor(options: ParallelTransactionExecutorOptions) {\n\t\tthis.#signer = options.signer;\n\t\tthis.#client = options.client;\n\t\tthis.#coinBatchSize = options.coinBatchSize ?? PARALLEL_EXECUTOR_DEFAULTS.coinBatchSize;\n\t\tthis.#initialCoinBalance =\n\t\t\toptions.initialCoinBalance ?? PARALLEL_EXECUTOR_DEFAULTS.initialCoinBalance;\n\t\tthis.#minimumCoinBalance =\n\t\t\toptions.minimumCoinBalance ?? PARALLEL_EXECUTOR_DEFAULTS.minimumCoinBalance;\n\t\tthis.#defaultGasBudget = options.defaultGasBudget ?? this.#minimumCoinBalance;\n\t\tthis.#epochBoundaryWindow =\n\t\t\toptions.epochBoundaryWindow ?? PARALLEL_EXECUTOR_DEFAULTS.epochBoundaryWindow;\n\t\tthis.#maxPoolSize = options.maxPoolSize ?? PARALLEL_EXECUTOR_DEFAULTS.maxPoolSize;\n\t\tthis.#cache = new CachingTransactionExecutor({\n\t\t\tclient: options.client,\n\t\t\tcache: options.cache,\n\t\t});\n\t\tthis.#executeQueue = new ParallelQueue(this.#maxPoolSize);\n\t\tthis.#sourceCoins = options.sourceCoins\n\t\t\t? new Map(options.sourceCoins.map((id) => [id, null]))\n\t\t\t: null;\n\t}\n\n\tresetCache() {\n\t\tthis.#gasPrice = null;\n\t\treturn this.#updateCache(() => this.#cache.reset());\n\t}\n\n\tasync waitForLastTransaction() {\n\t\tawait this.#updateCache(() => this.#waitForLastDigest());\n\t}\n\n\tasync executeTransaction(\n\t\ttransaction: Transaction,\n\t\toptions?: SuiTransactionBlockResponseOptions,\n\t\tadditionalSignatures: string[] = [],\n\t) {\n\t\tconst { promise, resolve, reject } = promiseWithResolvers<{\n\t\t\tdigest: string;\n\t\t\teffects: string;\n\t\t\tdata: SuiTransactionBlockResponse;\n\t\t}>();\n\t\tconst usedObjects = await this.#getUsedObjects(transaction);\n\n\t\tconst execute = () => {\n\t\t\tthis.#executeQueue.runTask(() => {\n\t\t\t\tconst promise = this.#execute(transaction, usedObjects, options, additionalSignatures);\n\n\t\t\t\treturn promise.then(resolve, reject);\n\t\t\t});\n\t\t};\n\n\t\tconst conflicts = new Set<string>();\n\n\t\tusedObjects.forEach((objectId) => {\n\t\t\tconst queue = this.#objectIdQueues.get(objectId);\n\t\t\tif (queue) {\n\t\t\t\tconflicts.add(objectId);\n\t\t\t\tthis.#objectIdQueues.get(objectId)!.push(() => {\n\t\t\t\t\tconflicts.delete(objectId);\n\t\t\t\t\tif (conflicts.size === 0) {\n\t\t\t\t\t\texecute();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.#objectIdQueues.set(objectId, []);\n\t\t\t}\n\t\t});\n\n\t\tif (conflicts.size === 0) {\n\t\t\texecute();\n\t\t}\n\n\t\treturn promise;\n\t}\n\n\tasync #getUsedObjects(transaction: Transaction) {\n\t\tconst usedObjects = new Set<string>();\n\t\tlet serialized = false;\n\n\t\ttransaction.addSerializationPlugin(async (blockData, _options, next) => {\n\t\t\tawait next();\n\n\t\t\tif (serialized) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tserialized = true;\n\n\t\t\tblockData.inputs.forEach((input) => {\n\t\t\t\tif (input.Object?.ImmOrOwnedObject?.objectId) {\n\t\t\t\t\tusedObjects.add(input.Object.ImmOrOwnedObject.objectId);\n\t\t\t\t} else if (input.Object?.Receiving?.objectId) {\n\t\t\t\t\tusedObjects.add(input.Object.Receiving.objectId);\n\t\t\t\t} else if (\n\t\t\t\t\tinput.UnresolvedObject?.objectId &&\n\t\t\t\t\t!input.UnresolvedObject.initialSharedVersion\n\t\t\t\t) {\n\t\t\t\t\tusedObjects.add(input.UnresolvedObject.objectId);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tawait transaction.prepareForSerialization({ client: this.#client });\n\n\t\treturn usedObjects;\n\t}\n\n\tasync #execute(\n\t\ttransaction: Transaction,\n\t\tusedObjects: Set<string>,\n\t\toptions?: SuiTransactionBlockResponseOptions,\n\t\tadditionalSignatures: string[] = [],\n\t) {\n\t\tlet gasCoin!: CoinWithBalance;\n\t\ttry {\n\t\t\ttransaction.setSenderIfNotSet(this.#signer.toSuiAddress());\n\n\t\t\tawait this.#buildQueue.runTask(async () => {\n\t\t\t\tconst data = transaction.getData();\n\n\t\t\t\tif (!data.gasData.price) {\n\t\t\t\t\ttransaction.setGasPrice(await this.#getGasPrice());\n\t\t\t\t}\n\n\t\t\t\ttransaction.setGasBudgetIfNotSet(this.#defaultGasBudget);\n\n\t\t\t\tawait this.#updateCache();\n\t\t\t\tgasCoin = await this.#getGasCoin();\n\t\t\t\tthis.#pendingTransactions++;\n\t\t\t\ttransaction.setGasPayment([\n\t\t\t\t\t{\n\t\t\t\t\t\tobjectId: gasCoin.id,\n\t\t\t\t\t\tversion: gasCoin.version,\n\t\t\t\t\t\tdigest: gasCoin.digest,\n\t\t\t\t\t},\n\t\t\t\t]);\n\n\t\t\t\t// Resolve cached references\n\t\t\t\tawait this.#cache.buildTransaction({ transaction, onlyTransactionKind: true });\n\t\t\t});\n\n\t\t\tconst bytes = await transaction.build({ client: this.#client });\n\n\t\t\tconst { signature } = await this.#signer.signTransaction(bytes);\n\n\t\t\tconst results = await this.#cache.executeTransaction({\n\t\t\t\ttransaction: bytes,\n\t\t\t\tsignature: [signature, ...additionalSignatures],\n\t\t\t\toptions: {\n\t\t\t\t\t...options,\n\t\t\t\t\tshowEffects: true,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tconst effectsBytes = Uint8Array.from(results.rawEffects!);\n\t\t\tconst effects = bcs.TransactionEffects.parse(effectsBytes);\n\n\t\t\tconst gasResult = getGasCoinFromEffects(effects);\n\t\t\tconst gasUsed = effects.V2?.gasUsed;\n\n\t\t\tif (gasCoin && gasUsed && gasResult.owner === this.#signer.toSuiAddress()) {\n\t\t\t\tconst totalUsed =\n\t\t\t\t\tBigInt(gasUsed.computationCost) +\n\t\t\t\t\tBigInt(gasUsed.storageCost) +\n\t\t\t\t\tBigInt(gasUsed.storageCost) -\n\t\t\t\t\tBigInt(gasUsed.storageRebate);\n\n\t\t\t\tlet usesGasCoin = false;\n\t\t\t\tnew TransactionDataBuilder(transaction.getData()).mapArguments((arg) => {\n\t\t\t\t\tif (arg.$kind === 'GasCoin') {\n\t\t\t\t\t\tusesGasCoin = true;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn arg;\n\t\t\t\t});\n\n\t\t\t\tif (!usesGasCoin && gasCoin.balance >= this.#minimumCoinBalance) {\n\t\t\t\t\tthis.#coinPool.push({\n\t\t\t\t\t\tid: gasResult.ref.objectId,\n\t\t\t\t\t\tversion: gasResult.ref.version,\n\t\t\t\t\t\tdigest: gasResult.ref.digest,\n\t\t\t\t\t\tbalance: gasCoin.balance - totalUsed,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tif (!this.#sourceCoins) {\n\t\t\t\t\t\tthis.#sourceCoins = new Map();\n\t\t\t\t\t}\n\t\t\t\t\tthis.#sourceCoins.set(gasResult.ref.objectId, gasResult.ref);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.#lastDigest = results.digest;\n\n\t\t\treturn {\n\t\t\t\tdigest: results.digest,\n\t\t\t\teffects: toBase64(effectsBytes),\n\t\t\t\tdata: results,\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tif (gasCoin) {\n\t\t\t\tif (!this.#sourceCoins) {\n\t\t\t\t\tthis.#sourceCoins = new Map();\n\t\t\t\t}\n\n\t\t\t\tthis.#sourceCoins.set(gasCoin.id, null);\n\t\t\t}\n\n\t\t\tawait this.#updateCache(async () => {\n\t\t\t\tawait Promise.all([\n\t\t\t\t\tthis.#cache.cache.deleteObjects([...usedObjects]),\n\t\t\t\t\tthis.#waitForLastDigest(),\n\t\t\t\t]);\n\t\t\t});\n\n\t\t\tthrow error;\n\t\t} finally {\n\t\t\tusedObjects.forEach((objectId) => {\n\t\t\t\tconst queue = this.#objectIdQueues.get(objectId);\n\t\t\t\tif (queue && queue.length > 0) {\n\t\t\t\t\tqueue.shift()!();\n\t\t\t\t} else if (queue) {\n\t\t\t\t\tthis.#objectIdQueues.delete(objectId);\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.#pendingTransactions--;\n\t\t}\n\t}\n\n\t/** Helper for synchronizing cache updates, by ensuring only one update happens at a time.  This can also be used to wait for any pending cache updates  */\n\tasync #updateCache(fn?: () => Promise<void>) {\n\t\tif (this.#cacheLock) {\n\t\t\tawait this.#cacheLock;\n\t\t}\n\n\t\tthis.#cacheLock =\n\t\t\tfn?.().then(\n\t\t\t\t() => {\n\t\t\t\t\tthis.#cacheLock = null;\n\t\t\t\t},\n\t\t\t\t() => {},\n\t\t\t) ?? null;\n\t}\n\n\tasync #waitForLastDigest() {\n\t\tconst digest = this.#lastDigest;\n\t\tif (digest) {\n\t\t\tthis.#lastDigest = null;\n\t\t\tawait this.#client.waitForTransaction({ digest });\n\t\t}\n\t}\n\n\tasync #getGasCoin() {\n\t\tif (this.#coinPool.length === 0 && this.#pendingTransactions <= this.#maxPoolSize) {\n\t\t\tawait this.#refillCoinPool();\n\t\t}\n\n\t\tif (this.#coinPool.length === 0) {\n\t\t\tthrow new Error('No coins available');\n\t\t}\n\n\t\tconst coin = this.#coinPool.shift()!;\n\t\treturn coin;\n\t}\n\n\tasync #getGasPrice(): Promise<bigint> {\n\t\tconst remaining = this.#gasPrice\n\t\t\t? this.#gasPrice.expiration - this.#epochBoundaryWindow - Date.now()\n\t\t\t: 0;\n\n\t\tif (remaining > 0) {\n\t\t\treturn this.#gasPrice!.price;\n\t\t}\n\n\t\tif (this.#gasPrice) {\n\t\t\tconst timeToNextEpoch = Math.max(\n\t\t\t\tthis.#gasPrice.expiration + this.#epochBoundaryWindow - Date.now(),\n\t\t\t\t1_000,\n\t\t\t);\n\n\t\t\tawait new Promise((resolve) => setTimeout(resolve, timeToNextEpoch));\n\t\t}\n\n\t\tconst state = await this.#client.getLatestSuiSystemState();\n\n\t\tthis.#gasPrice = {\n\t\t\tprice: BigInt(state.referenceGasPrice),\n\t\t\texpiration:\n\t\t\t\tNumber.parseInt(state.epochStartTimestampMs, 10) +\n\t\t\t\tNumber.parseInt(state.epochDurationMs, 10),\n\t\t};\n\n\t\treturn this.#getGasPrice();\n\t}\n\n\tasync #refillCoinPool() {\n\t\tconst batchSize = Math.min(\n\t\t\tthis.#coinBatchSize,\n\t\t\tthis.#maxPoolSize - (this.#coinPool.length + this.#pendingTransactions) + 1,\n\t\t);\n\n\t\tif (batchSize === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst txb = new Transaction();\n\t\tconst address = this.#signer.toSuiAddress();\n\t\ttxb.setSender(address);\n\n\t\tif (this.#sourceCoins) {\n\t\t\tconst refs = [];\n\t\t\tconst ids = [];\n\t\t\tfor (const [id, ref] of this.#sourceCoins) {\n\t\t\t\tif (ref) {\n\t\t\t\t\trefs.push(ref);\n\t\t\t\t} else {\n\t\t\t\t\tids.push(id);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (ids.length > 0) {\n\t\t\t\tconst coins = await this.#client.multiGetObjects({\n\t\t\t\t\tids,\n\t\t\t\t});\n\t\t\t\trefs.push(\n\t\t\t\t\t...coins\n\t\t\t\t\t\t.filter((coin): coin is typeof coin & { data: object } => coin.data !== null)\n\t\t\t\t\t\t.map(({ data }) => ({\n\t\t\t\t\t\t\tobjectId: data.objectId,\n\t\t\t\t\t\t\tversion: data.version,\n\t\t\t\t\t\t\tdigest: data.digest,\n\t\t\t\t\t\t})),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\ttxb.setGasPayment(refs);\n\t\t\tthis.#sourceCoins = new Map();\n\t\t}\n\n\t\tconst amounts = new Array(batchSize).fill(this.#initialCoinBalance);\n\t\tconst results = txb.splitCoins(txb.gas, amounts);\n\t\tconst coinResults = [];\n\t\tfor (let i = 0; i < amounts.length; i++) {\n\t\t\tcoinResults.push(results[i]);\n\t\t}\n\t\ttxb.transferObjects(coinResults, address);\n\n\t\tawait this.waitForLastTransaction();\n\n\t\tconst result = await this.#client.signAndExecuteTransaction({\n\t\t\ttransaction: txb,\n\t\t\tsigner: this.#signer,\n\t\t\toptions: {\n\t\t\t\tshowRawEffects: true,\n\t\t\t},\n\t\t});\n\n\t\tconst effects = bcs.TransactionEffects.parse(Uint8Array.from(result.rawEffects!));\n\t\teffects.V2?.changedObjects.forEach(([id, { outputState }], i) => {\n\t\t\tif (i === effects.V2?.gasObjectIndex || !outputState.ObjectWrite) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.#coinPool.push({\n\t\t\t\tid,\n\t\t\t\tversion: effects.V2!.lamportVersion,\n\t\t\t\tdigest: outputState.ObjectWrite[0],\n\t\t\t\tbalance: BigInt(this.#initialCoinBalance),\n\t\t\t});\n\t\t});\n\n\t\tif (!this.#sourceCoins) {\n\t\t\tthis.#sourceCoins = new Map();\n\t\t}\n\n\t\tconst gasObject = getGasCoinFromEffects(effects).ref;\n\t\tthis.#sourceCoins!.set(gasObject.objectId, gasObject);\n\n\t\tawait this.#client.waitForTransaction({ digest: result.digest });\n\t}\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { InferInput } from 'valibot';\nimport { bigint, object, parse, string } from 'valibot';\n\nimport { bcs } from '../../bcs/index.js';\nimport type { CoinStruct, SuiClient } from '../../client/index.js';\nimport { normalizeStructTag } from '../../utils/sui-types.js';\nimport { Commands } from '../Commands.js';\nimport type { Argument } from '../data/internal.js';\nimport { Inputs } from '../Inputs.js';\nimport { getClient } from '../resolve.js';\nimport type { BuildTransactionOptions } from '../resolve.js';\nimport type { Transaction, TransactionResult } from '../Transaction.js';\nimport type { TransactionDataBuilder } from '../TransactionData.js';\n\nconst COIN_WITH_BALANCE = 'CoinWithBalance';\nconst SUI_TYPE = normalizeStructTag('0x2::sui::SUI');\n\nexport function coinWithBalance({\n\ttype = SUI_TYPE,\n\tbalance,\n\tuseGasCoin = true,\n}: {\n\tbalance: bigint | number;\n\ttype?: string;\n\tuseGasCoin?: boolean;\n}): (tx: Transaction) => TransactionResult {\n\tlet coinResult: TransactionResult | null = null;\n\n\treturn (tx: Transaction) => {\n\t\tif (coinResult) {\n\t\t\treturn coinResult;\n\t\t}\n\n\t\ttx.addIntentResolver(COIN_WITH_BALANCE, resolveCoinBalance);\n\t\tconst coinType = type === 'gas' ? type : normalizeStructTag(type);\n\n\t\tcoinResult = tx.add(\n\t\t\tCommands.Intent({\n\t\t\t\tname: COIN_WITH_BALANCE,\n\t\t\t\tinputs: {},\n\t\t\t\tdata: {\n\t\t\t\t\ttype: coinType === SUI_TYPE && useGasCoin ? 'gas' : coinType,\n\t\t\t\t\tbalance: BigInt(balance),\n\t\t\t\t} satisfies InferInput<typeof CoinWithBalanceData>,\n\t\t\t}),\n\t\t);\n\n\t\treturn coinResult;\n\t};\n}\n\nconst CoinWithBalanceData = object({\n\ttype: string(),\n\tbalance: bigint(),\n});\n\nasync function resolveCoinBalance(\n\ttransactionData: TransactionDataBuilder,\n\tbuildOptions: BuildTransactionOptions,\n\tnext: () => Promise<void>,\n) {\n\tconst coinTypes = new Set<string>();\n\tconst totalByType = new Map<string, bigint>();\n\n\tif (!transactionData.sender) {\n\t\tthrow new Error('Sender must be set to resolve CoinWithBalance');\n\t}\n\n\tfor (const command of transactionData.commands) {\n\t\tif (command.$kind === '$Intent' && command.$Intent.name === COIN_WITH_BALANCE) {\n\t\t\tconst { type, balance } = parse(CoinWithBalanceData, command.$Intent.data);\n\n\t\t\tif (type !== 'gas' && balance > 0n) {\n\t\t\t\tcoinTypes.add(type);\n\t\t\t}\n\n\t\t\ttotalByType.set(type, (totalByType.get(type) ?? 0n) + balance);\n\t\t}\n\t}\n\tconst usedIds = new Set<string>();\n\n\tfor (const input of transactionData.inputs) {\n\t\tif (input.Object?.ImmOrOwnedObject) {\n\t\t\tusedIds.add(input.Object.ImmOrOwnedObject.objectId);\n\t\t}\n\t\tif (input.UnresolvedObject?.objectId) {\n\t\t\tusedIds.add(input.UnresolvedObject.objectId);\n\t\t}\n\t}\n\n\tconst coinsByType = new Map<string, CoinStruct[]>();\n\tconst client = getSuiClient(buildOptions);\n\tawait Promise.all(\n\t\t[...coinTypes].map(async (coinType) => {\n\t\t\tcoinsByType.set(\n\t\t\t\tcoinType,\n\t\t\t\tawait getCoinsOfType({\n\t\t\t\t\tcoinType,\n\t\t\t\t\tbalance: totalByType.get(coinType)!,\n\t\t\t\t\tclient,\n\t\t\t\t\towner: transactionData.sender!,\n\t\t\t\t\tusedIds,\n\t\t\t\t}),\n\t\t\t);\n\t\t}),\n\t);\n\n\tconst mergedCoins = new Map<string, Argument>();\n\n\tmergedCoins.set('gas', { $kind: 'GasCoin', GasCoin: true });\n\n\tfor (const [index, transaction] of transactionData.commands.entries()) {\n\t\tif (transaction.$kind !== '$Intent' || transaction.$Intent.name !== COIN_WITH_BALANCE) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst { type, balance } = transaction.$Intent.data as {\n\t\t\ttype: string;\n\t\t\tbalance: bigint;\n\t\t};\n\n\t\tif (balance === 0n && type !== 'gas') {\n\t\t\ttransactionData.replaceCommand(\n\t\t\t\tindex,\n\t\t\t\tCommands.MoveCall({ target: '0x2::coin::zero', typeArguments: [type] }),\n\t\t\t);\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst commands = [];\n\n\t\tif (!mergedCoins.has(type)) {\n\t\t\tconst [first, ...rest] = coinsByType.get(type)!.map((coin) =>\n\t\t\t\ttransactionData.addInput(\n\t\t\t\t\t'object',\n\t\t\t\t\tInputs.ObjectRef({\n\t\t\t\t\t\tobjectId: coin.coinObjectId,\n\t\t\t\t\t\tdigest: coin.digest,\n\t\t\t\t\t\tversion: coin.version,\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tif (rest.length > 0) {\n\t\t\t\tcommands.push(Commands.MergeCoins(first, rest));\n\t\t\t}\n\n\t\t\tmergedCoins.set(type, first);\n\t\t}\n\n\t\tcommands.push(\n\t\t\tCommands.SplitCoins(mergedCoins.get(type)!, [\n\t\t\t\ttransactionData.addInput('pure', Inputs.Pure(bcs.u64().serialize(balance))),\n\t\t\t]),\n\t\t);\n\n\t\ttransactionData.replaceCommand(index, commands);\n\n\t\ttransactionData.mapArguments((arg) => {\n\t\t\tif (arg.$kind === 'Result' && arg.Result === index) {\n\t\t\t\treturn {\n\t\t\t\t\t$kind: 'NestedResult',\n\t\t\t\t\tNestedResult: [index + commands.length - 1, 0],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn arg;\n\t\t});\n\t}\n\n\treturn next();\n}\n\nasync function getCoinsOfType({\n\tcoinType,\n\tbalance,\n\tclient,\n\towner,\n\tusedIds,\n}: {\n\tcoinType: string;\n\tbalance: bigint;\n\tclient: SuiClient;\n\towner: string;\n\tusedIds: Set<string>;\n}): Promise<CoinStruct[]> {\n\tlet remainingBalance = balance;\n\tconst coins: CoinStruct[] = [];\n\n\treturn loadMoreCoins();\n\n\tasync function loadMoreCoins(cursor: string | null = null): Promise<CoinStruct[]> {\n\t\tconst { data, hasNextPage, nextCursor } = await client.getCoins({ owner, coinType, cursor });\n\n\t\tconst sortedCoins = data.sort((a, b) => Number(BigInt(b.balance) - BigInt(a.balance)));\n\n\t\tfor (const coin of sortedCoins) {\n\t\t\tif (usedIds.has(coin.coinObjectId)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst coinBalance = BigInt(coin.balance);\n\n\t\t\tcoins.push(coin);\n\t\t\tremainingBalance -= coinBalance;\n\n\t\t\tif (remainingBalance <= 0) {\n\t\t\t\treturn coins;\n\t\t\t}\n\t\t}\n\n\t\tif (hasNextPage) {\n\t\t\treturn loadMoreCoins(nextCursor);\n\t\t}\n\n\t\tthrow new Error(`Not enough coins of type ${coinType} to satisfy requested balance`);\n\t}\n}\n\nexport function getSuiClient(options: BuildTransactionOptions): SuiClient {\n\tconst client = getClient(options) as SuiClient;\n\tif (!client.jsonRpc) {\n\t\tthrow new Error(`CoinWithBalance intent currently only works with SuiClient`);\n\t}\n\n\treturn client;\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Argument } from './data/internal.js';\nimport type { Inputs } from './Inputs.js';\nimport { createObjectMethods } from './object.js';\nimport { createPure } from './pure.js';\nimport type { Transaction, TransactionObjectArgument } from './Transaction.js';\n\nexport const Arguments = {\n\tpure: createPure<(tx: Transaction) => Argument>((value) => (tx) => tx.pure(value)) as ReturnType<\n\t\ttypeof createPure<(tx: Transaction) => Argument>\n\t>,\n\tobject: createObjectMethods<TransactionObjectArgument>((value) => (tx) => tx.object(value)),\n\tsharedObjectRef:\n\t\t(...args: Parameters<(typeof Inputs)['SharedObjectRef']>) =>\n\t\t(tx: Transaction) =>\n\t\t\ttx.sharedObjectRef(...args),\n\tobjectRef:\n\t\t(...args: Parameters<(typeof Inputs)['ObjectRef']>) =>\n\t\t(tx: Transaction) =>\n\t\t\ttx.objectRef(...args),\n\treceivingRef:\n\t\t(...args: Parameters<(typeof Inputs)['ReceivingRef']>) =>\n\t\t(tx: Transaction) =>\n\t\t\ttx.receivingRef(...args),\n};\n"],
  "mappings": "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",
  "names": ["object", "cached", "_a", "__privateAdd", "__privateSet", "__privateGet", "_queue", "__privateAdd", "__privateGet", "_queue", "_cache", "__privateAdd", "__privateGet", "__privateSet", "_signer", "_client", "_defaultGasBudget", "_cache", "_lastDigest", "__privateAdd", "__privateSet", "__privateGet", "promise", "_a"]
}
